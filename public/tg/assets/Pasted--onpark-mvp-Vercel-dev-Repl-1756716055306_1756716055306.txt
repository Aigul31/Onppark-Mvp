Ты работаешь в текущем репо onpark_mvp. Сделай рефакторинг под продакшн (Vercel), убрав все dev/Replit/localhost хардкоды.

ЦЕЛЬ:
1) Вынести конфигурацию в один файл config.js.
2) Подключить config.js раньше основного скрипта в index.html.
3) Заменить все dev-ссылки (localhost, 127.0.0.1, *.replit.dev, http://, ws://) на корректные варианты для продакшна.
4) Привести инициализацию Supabase к единому месту (через переменные из config.js).
5) Убедиться, что .env не коммитится, а фронт использует только anon key.

ШАГИ:

A) Создай файл /config.js со следующим содержимым (если файл есть — перезапиши):
---------------------------------------------------------------------------
/* Централизованная конфигурация фронтенда */
window.APP_CONFIG = {
  API_BASE: window.location.origin,               // базовый адрес для fetch: `${API_BASE}/api/...`

  // TODO: подставь реальные значения Supabase (anon key допускается в браузере)
  SUPABASE_URL: "https://<YOUR_PROJECT>.supabase.co",
  SUPABASE_ANON_KEY: "<YOUR_PUBLIC_ANON_KEY>",

  // Если используем карты:
  // MAPBOX_TOKEN: "<YOUR_TOKEN>"
};
---------------------------------------------------------------------------

B) В файле /index.html: 
- Убедись, что перед всеми нашими скриптами подключен config.js:
  <script src="config.js"></script>
- Этот тег должен стоять ВЫШЕ основного script.js (и любых модулей, где нужна конфигурация).

C) По всему проекту (index.html, script.js, database.js, objectStorage.js, server.js и др.):
- Найди и замени хардкоды:
  1) fetch("http://localhost:PORT/...") или fetch("https://*.pike.replit.dev/...") 
     → fetch(`${window.APP_CONFIG.API_BASE}/api/...`) 
     (Если реального backend /api нет и мы работаем напрямую с Supabase, такие вызовы просто удали/замени на supabase-js).

  2) Инициализацию Supabase приведи к виду (в одном месте, ближе к старту app, например в начале script.js):
     const { SUPABASE_URL, SUPABASE_ANON_KEY } = window.APP_CONFIG;
     const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

     Удали дублирующиеся createClient и любые dev-ключи, прописанные в коде.

  3) Все внешние небезопасные ссылки "http://" замени на "https://", если это не локальный dev.
     Все "ws://" замени на "wss://", если это прод подключение.

  4) Удали/замени любые упоминания "*.replit.dev" и "localhost/127.0.0.1".
     Если в коде где-то формируются абсолютные URL, используй window.location.origin или window.APP_CONFIG.API_BASE.

D) Если есть server.js, который раньше служил для статики:
- Не меняй функционал, но оставь комментарий вверху файла, что на Vercel статика обслуживается без Express.
- Вызовы к локальным эндпоинтам из фронта удалить/перенести на `${API_BASE}/api/...` (если такие serverless-функции созданы). Если функций нет — убрать эти вызовы.

E) Обнови .gitignore:
- Убедись, что в нём есть строки:
  .env
  .replit
  .cache
  node_modules
- Если .env вдруг попал в индекс — выполни git rm --cached .env (оставь файл на диске, но убери из репозитория). НЕ удали его содержимое.

F) Прогон самопроверки:
- Выполни поиск на остатки dev-хардкодов и верни отчёт списком строк (файл:номер:фрагмент), если что-то осталось:
  localhost | 127.0.0.1 | replit | pike.replit.dev | http:// | ws://
- Собери проект (если требуется) и проверь, что в консоли нет ошибок из-за недостающих переменных.

G) В финальном сообщении:
- Перечисли все затронутые файлы и конкретные изменения.
- Покажи, где теперь создаётся клиент Supabase.
- Укажи, какие TODO мне заполнить вручную (например, SUPABASE_URL и SUPABASE_ANON_KEY в config.js).
- Если были вызовы к /api, перечисли их и скажи, есть ли сейчас реальные обработчики (или нужно создать Vercel Serverless Functions в папке /api).
